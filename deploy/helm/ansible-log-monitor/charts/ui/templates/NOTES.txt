ðŸš€ Ansible Logs Viewer Gradio UI has been deployed!

1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "ui.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch its status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "ui.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "ui.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "ui.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:7860 to use your Gradio application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 7860:7860
{{- end }}

2. Check the status of your deployment:
   kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "ui.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

3. View logs:
   kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "ui.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

{{- if .Values.autoscaling.enabled }}
4. Horizontal Pod Autoscaler is enabled with:
   - Min replicas: {{ .Values.autoscaling.minReplicas }}
   - Max replicas: {{ .Values.autoscaling.maxReplicas }}
   - CPU target: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}%
   {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
   - Memory target: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}%
   {{- end }}
{{- end }}

ðŸ“Š Your Gradio UI is now ready to serve log analysis and monitoring!