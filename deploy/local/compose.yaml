networks:
  alm:

services:
  loki-mcp-server:
    # image: loki-mcp-server:latest
    image: loki-mcp:v0.2.0-direction
    container_name: loki-mcp-server
    ports:
      - "8080:8080"
    environment:
      - LOKI_URL=http://loki:3100
      - PORT=8080
    depends_on:
      loki:
        condition: service_healthy

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - alm
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - alm
  
  phoenix:
    image: arizephoenix/phoenix:latest
    ports:
      - "6006:6006"  # UI and OTLP HTTP collector
      - "4317:4317"  # OTLP gRPC collector
    networks:
      - alm
    environment:
      - PHOENIX_SQL_DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/logsdb # we dont use DATABASE_URL becuase it point to localhost, and the backend server isnt in the same network as phoenix.
  promtail:
    image: grafana/promtail:latest
    user: "root"
    volumes:
      - ./config/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:Z
      - ../../data/logs/:/var/log/ansible_logs:Z
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - alm

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=logsdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - alm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d logsdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Containerfile
    ports:
      - "8000:8000"
    env_file:
      - ../../.env
    environment:
      - OPENAI_API_TOKEN=${OPENAI_API_TOKEN:-your-openai-token}
      - OPENAI_API_ENDPOINT=${OPENAI_API_ENDPOINT:-https://api.openai.com/v1}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - LANGSMITH_TRACING=${LANGSMITH_TRACING:-false}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY:-your-langsmith-key}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT:-ansible-log-monitor}
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://user:password@postgres:5432/logsdb}
      - BACKEND_URL=${BACKEND_URL}
      - COLLECTOR_ENDPOINT=${COLLECTOR_ENDPOINT:-http://phoenix:6006/v1/traces}
      - PROD_CORS_ORIGIN=${PROD_CORS_ORIGIN:-http://localhost:3000}
    # volumes:
    #   - ./src:/app/src:ro
    #   - ./config:/app/config:ro
    networks:
      - alm
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./ui
      dockerfile: Containerfile
    ports:
      - "7860:7860"  # Gradio default port
    environment:
      - BACKEND_URL=${BACKEND_URL:-http://backend:8000}
    networks:
      - alm
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data: